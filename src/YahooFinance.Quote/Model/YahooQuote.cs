/* 
 * Yahoo Finance Quote API
 *
 * This is the API from yahoo finance to get quote for symbols.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kobeyoung81@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = YahooFinance.Quote.Client.SwaggerDateConverter;

namespace YahooFinance.Quote.Model
{
    /// <summary>
    /// YahooQuote
    /// </summary>
    [DataContract]
        public partial class YahooQuote :  IEquatable<YahooQuote>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="YahooQuote" /> class.
        /// </summary>
        /// <param name="language">language.</param>
        /// <param name="region">region.</param>
        /// <param name="quoteType">quoteType.</param>
        /// <param name="quoteSourceName">quoteSourceName.</param>
        /// <param name="currency">currency.</param>
        /// <param name="marketState">marketState.</param>
        /// <param name="priceHint">priceHint.</param>
        /// <param name="regularMarketChangePercent">regularMarketChangePercent.</param>
        /// <param name="regularMarketDayRange">regularMarketDayRange.</param>
        /// <param name="bid">bid.</param>
        /// <param name="regularMarketPreviousClose">regularMarketPreviousClose.</param>
        /// <param name="regularMarketPrice">regularMarketPrice.</param>
        /// <param name="regularMarketTime">regularMarketTime.</param>
        /// <param name="regularMarketChange">regularMarketChange.</param>
        /// <param name="regularMarketOpen">regularMarketOpen.</param>
        /// <param name="regularMarketDayHigh">regularMarketDayHigh.</param>
        /// <param name="regularMarketDayLow">regularMarketDayLow.</param>
        /// <param name="regularMarketVolume">regularMarketVolume.</param>
        /// <param name="exchange">exchange.</param>
        /// <param name="epsTrailingTwelveMonths">epsTrailingTwelveMonths.</param>
        /// <param name="epsForward">epsForward.</param>
        /// <param name="sharesOutstanding">sharesOutstanding.</param>
        /// <param name="bookValue">bookValue.</param>
        /// <param name="fiftyDayAverage">fiftyDayAverage.</param>
        /// <param name="fiftyDayAverageChange">fiftyDayAverageChange.</param>
        /// <param name="fiftyDayAverageChangePercent">fiftyDayAverageChangePercent.</param>
        /// <param name="twoHundredDayAverage">twoHundredDayAverage.</param>
        /// <param name="twoHundredDayAverageChange">twoHundredDayAverageChange.</param>
        /// <param name="twoHundredDayAverageChangePercent">twoHundredDayAverageChangePercent.</param>
        /// <param name="marketCap">marketCap.</param>
        /// <param name="ask">ask.</param>
        /// <param name="bidSize">bidSize.</param>
        /// <param name="askSize">askSize.</param>
        /// <param name="messageBoardId">messageBoardId.</param>
        /// <param name="fullExchangeName">fullExchangeName.</param>
        /// <param name="longName">longName.</param>
        /// <param name="financialCurrency">financialCurrency.</param>
        /// <param name="averageDailyVolume3Month">averageDailyVolume3Month.</param>
        /// <param name="averageDailyVolume10Day">averageDailyVolume10Day.</param>
        /// <param name="fiftyTwoWeekLowChange">fiftyTwoWeekLowChange.</param>
        /// <param name="fiftyTwoWeekLowChangePercent">fiftyTwoWeekLowChangePercent.</param>
        /// <param name="fiftyTwoWeekRange">fiftyTwoWeekRange.</param>
        /// <param name="fiftyTwoWeekHighChange">fiftyTwoWeekHighChange.</param>
        /// <param name="fiftyTwoWeekHighChangePercent">fiftyTwoWeekHighChangePercent.</param>
        /// <param name="fiftyTwoWeekLow">fiftyTwoWeekLow.</param>
        /// <param name="fiftyTwoWeekHigh">fiftyTwoWeekHigh.</param>
        /// <param name="trailingPE">trailingPE.</param>
        /// <param name="market">market.</param>
        /// <param name="shortName">shortName.</param>
        /// <param name="forwardPE">forwardPE.</param>
        /// <param name="priceToBook">priceToBook.</param>
        /// <param name="sourceInterval">sourceInterval.</param>
        /// <param name="exchangeTimezoneName">exchangeTimezoneName.</param>
        /// <param name="exchangeTimezoneShortName">exchangeTimezoneShortName.</param>
        /// <param name="gmtOffSetMilliseconds">gmtOffSetMilliseconds.</param>
        /// <param name="esgPopulated">esgPopulated.</param>
        /// <param name="tradeable">tradeable.</param>
        /// <param name="triggerable">triggerable.</param>
        /// <param name="exchangeDataDelayedBy">exchangeDataDelayedBy.</param>
        /// <param name="symbol">symbol.</param>
        public YahooQuote(string language = default(string), string region = default(string), string quoteType = default(string), string quoteSourceName = default(string), string currency = default(string), string marketState = default(string), string priceHint = default(string), double? regularMarketChangePercent = default(double?), string regularMarketDayRange = default(string), double? bid = default(double?), double? regularMarketPreviousClose = default(double?), double? regularMarketPrice = default(double?), string regularMarketTime = default(string), double? regularMarketChange = default(double?), double? regularMarketOpen = default(double?), double? regularMarketDayHigh = default(double?), double? regularMarketDayLow = default(double?), double? regularMarketVolume = default(double?), string exchange = default(string), double? epsTrailingTwelveMonths = default(double?), double? epsForward = default(double?), double? sharesOutstanding = default(double?), double? bookValue = default(double?), double? fiftyDayAverage = default(double?), double? fiftyDayAverageChange = default(double?), double? fiftyDayAverageChangePercent = default(double?), double? twoHundredDayAverage = default(double?), double? twoHundredDayAverageChange = default(double?), double? twoHundredDayAverageChangePercent = default(double?), double? marketCap = default(double?), double? ask = default(double?), double? bidSize = default(double?), double? askSize = default(double?), string messageBoardId = default(string), string fullExchangeName = default(string), string longName = default(string), string financialCurrency = default(string), double? averageDailyVolume3Month = default(double?), double? averageDailyVolume10Day = default(double?), double? fiftyTwoWeekLowChange = default(double?), double? fiftyTwoWeekLowChangePercent = default(double?), string fiftyTwoWeekRange = default(string), double? fiftyTwoWeekHighChange = default(double?), double? fiftyTwoWeekHighChangePercent = default(double?), double? fiftyTwoWeekLow = default(double?), double? fiftyTwoWeekHigh = default(double?), double? trailingPE = default(double?), string market = default(string), string shortName = default(string), double? forwardPE = default(double?), double? priceToBook = default(double?), double? sourceInterval = default(double?), string exchangeTimezoneName = default(string), string exchangeTimezoneShortName = default(string), long? gmtOffSetMilliseconds = default(long?), bool? esgPopulated = default(bool?), bool? tradeable = default(bool?), bool? triggerable = default(bool?), long? exchangeDataDelayedBy = default(long?), string symbol = default(string))
        {
            this.Language = language;
            this.Region = region;
            this.QuoteType = quoteType;
            this.QuoteSourceName = quoteSourceName;
            this.Currency = currency;
            this.MarketState = marketState;
            this.PriceHint = priceHint;
            this.RegularMarketChangePercent = regularMarketChangePercent;
            this.RegularMarketDayRange = regularMarketDayRange;
            this.Bid = bid;
            this.RegularMarketPreviousClose = regularMarketPreviousClose;
            this.RegularMarketPrice = regularMarketPrice;
            this.RegularMarketTime = regularMarketTime;
            this.RegularMarketChange = regularMarketChange;
            this.RegularMarketOpen = regularMarketOpen;
            this.RegularMarketDayHigh = regularMarketDayHigh;
            this.RegularMarketDayLow = regularMarketDayLow;
            this.RegularMarketVolume = regularMarketVolume;
            this.Exchange = exchange;
            this.EpsTrailingTwelveMonths = epsTrailingTwelveMonths;
            this.EpsForward = epsForward;
            this.SharesOutstanding = sharesOutstanding;
            this.BookValue = bookValue;
            this.FiftyDayAverage = fiftyDayAverage;
            this.FiftyDayAverageChange = fiftyDayAverageChange;
            this.FiftyDayAverageChangePercent = fiftyDayAverageChangePercent;
            this.TwoHundredDayAverage = twoHundredDayAverage;
            this.TwoHundredDayAverageChange = twoHundredDayAverageChange;
            this.TwoHundredDayAverageChangePercent = twoHundredDayAverageChangePercent;
            this.MarketCap = marketCap;
            this.Ask = ask;
            this.BidSize = bidSize;
            this.AskSize = askSize;
            this.MessageBoardId = messageBoardId;
            this.FullExchangeName = fullExchangeName;
            this.LongName = longName;
            this.FinancialCurrency = financialCurrency;
            this.AverageDailyVolume3Month = averageDailyVolume3Month;
            this.AverageDailyVolume10Day = averageDailyVolume10Day;
            this.FiftyTwoWeekLowChange = fiftyTwoWeekLowChange;
            this.FiftyTwoWeekLowChangePercent = fiftyTwoWeekLowChangePercent;
            this.FiftyTwoWeekRange = fiftyTwoWeekRange;
            this.FiftyTwoWeekHighChange = fiftyTwoWeekHighChange;
            this.FiftyTwoWeekHighChangePercent = fiftyTwoWeekHighChangePercent;
            this.FiftyTwoWeekLow = fiftyTwoWeekLow;
            this.FiftyTwoWeekHigh = fiftyTwoWeekHigh;
            this.TrailingPE = trailingPE;
            this.Market = market;
            this.ShortName = shortName;
            this.ForwardPE = forwardPE;
            this.PriceToBook = priceToBook;
            this.SourceInterval = sourceInterval;
            this.ExchangeTimezoneName = exchangeTimezoneName;
            this.ExchangeTimezoneShortName = exchangeTimezoneShortName;
            this.GmtOffSetMilliseconds = gmtOffSetMilliseconds;
            this.EsgPopulated = esgPopulated;
            this.Tradeable = tradeable;
            this.Triggerable = triggerable;
            this.ExchangeDataDelayedBy = exchangeDataDelayedBy;
            this.Symbol = symbol;
        }
        
        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets QuoteType
        /// </summary>
        [DataMember(Name="quoteType", EmitDefaultValue=false)]
        public string QuoteType { get; set; }

        /// <summary>
        /// Gets or Sets QuoteSourceName
        /// </summary>
        [DataMember(Name="quoteSourceName", EmitDefaultValue=false)]
        public string QuoteSourceName { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets MarketState
        /// </summary>
        [DataMember(Name="marketState", EmitDefaultValue=false)]
        public string MarketState { get; set; }

        /// <summary>
        /// Gets or Sets PriceHint
        /// </summary>
        [DataMember(Name="priceHint", EmitDefaultValue=false)]
        public string PriceHint { get; set; }

        /// <summary>
        /// Gets or Sets RegularMarketChangePercent
        /// </summary>
        [DataMember(Name="regularMarketChangePercent", EmitDefaultValue=false)]
        public double? RegularMarketChangePercent { get; set; }

        /// <summary>
        /// Gets or Sets RegularMarketDayRange
        /// </summary>
        [DataMember(Name="regularMarketDayRange", EmitDefaultValue=false)]
        public string RegularMarketDayRange { get; set; }

        /// <summary>
        /// Gets or Sets Bid
        /// </summary>
        [DataMember(Name="bid", EmitDefaultValue=false)]
        public double? Bid { get; set; }

        /// <summary>
        /// Gets or Sets RegularMarketPreviousClose
        /// </summary>
        [DataMember(Name="regularMarketPreviousClose", EmitDefaultValue=false)]
        public double? RegularMarketPreviousClose { get; set; }

        /// <summary>
        /// Gets or Sets RegularMarketPrice
        /// </summary>
        [DataMember(Name="regularMarketPrice", EmitDefaultValue=false)]
        public double? RegularMarketPrice { get; set; }

        /// <summary>
        /// Gets or Sets RegularMarketTime
        /// </summary>
        [DataMember(Name="regularMarketTime", EmitDefaultValue=false)]
        public string RegularMarketTime { get; set; }

        /// <summary>
        /// Gets or Sets RegularMarketChange
        /// </summary>
        [DataMember(Name="regularMarketChange", EmitDefaultValue=false)]
        public double? RegularMarketChange { get; set; }

        /// <summary>
        /// Gets or Sets RegularMarketOpen
        /// </summary>
        [DataMember(Name="regularMarketOpen", EmitDefaultValue=false)]
        public double? RegularMarketOpen { get; set; }

        /// <summary>
        /// Gets or Sets RegularMarketDayHigh
        /// </summary>
        [DataMember(Name="regularMarketDayHigh", EmitDefaultValue=false)]
        public double? RegularMarketDayHigh { get; set; }

        /// <summary>
        /// Gets or Sets RegularMarketDayLow
        /// </summary>
        [DataMember(Name="regularMarketDayLow", EmitDefaultValue=false)]
        public double? RegularMarketDayLow { get; set; }

        /// <summary>
        /// Gets or Sets RegularMarketVolume
        /// </summary>
        [DataMember(Name="regularMarketVolume", EmitDefaultValue=false)]
        public double? RegularMarketVolume { get; set; }

        /// <summary>
        /// Gets or Sets Exchange
        /// </summary>
        [DataMember(Name="exchange", EmitDefaultValue=false)]
        public string Exchange { get; set; }

        /// <summary>
        /// Gets or Sets EpsTrailingTwelveMonths
        /// </summary>
        [DataMember(Name="epsTrailingTwelveMonths", EmitDefaultValue=false)]
        public double? EpsTrailingTwelveMonths { get; set; }

        /// <summary>
        /// Gets or Sets EpsForward
        /// </summary>
        [DataMember(Name="epsForward", EmitDefaultValue=false)]
        public double? EpsForward { get; set; }

        /// <summary>
        /// Gets or Sets SharesOutstanding
        /// </summary>
        [DataMember(Name="sharesOutstanding", EmitDefaultValue=false)]
        public double? SharesOutstanding { get; set; }

        /// <summary>
        /// Gets or Sets BookValue
        /// </summary>
        [DataMember(Name="bookValue", EmitDefaultValue=false)]
        public double? BookValue { get; set; }

        /// <summary>
        /// Gets or Sets FiftyDayAverage
        /// </summary>
        [DataMember(Name="fiftyDayAverage", EmitDefaultValue=false)]
        public double? FiftyDayAverage { get; set; }

        /// <summary>
        /// Gets or Sets FiftyDayAverageChange
        /// </summary>
        [DataMember(Name="fiftyDayAverageChange", EmitDefaultValue=false)]
        public double? FiftyDayAverageChange { get; set; }

        /// <summary>
        /// Gets or Sets FiftyDayAverageChangePercent
        /// </summary>
        [DataMember(Name="fiftyDayAverageChangePercent", EmitDefaultValue=false)]
        public double? FiftyDayAverageChangePercent { get; set; }

        /// <summary>
        /// Gets or Sets TwoHundredDayAverage
        /// </summary>
        [DataMember(Name="twoHundredDayAverage", EmitDefaultValue=false)]
        public double? TwoHundredDayAverage { get; set; }

        /// <summary>
        /// Gets or Sets TwoHundredDayAverageChange
        /// </summary>
        [DataMember(Name="twoHundredDayAverageChange", EmitDefaultValue=false)]
        public double? TwoHundredDayAverageChange { get; set; }

        /// <summary>
        /// Gets or Sets TwoHundredDayAverageChangePercent
        /// </summary>
        [DataMember(Name="twoHundredDayAverageChangePercent", EmitDefaultValue=false)]
        public double? TwoHundredDayAverageChangePercent { get; set; }

        /// <summary>
        /// Gets or Sets MarketCap
        /// </summary>
        [DataMember(Name="marketCap", EmitDefaultValue=false)]
        public double? MarketCap { get; set; }

        /// <summary>
        /// Gets or Sets Ask
        /// </summary>
        [DataMember(Name="ask", EmitDefaultValue=false)]
        public double? Ask { get; set; }

        /// <summary>
        /// Gets or Sets BidSize
        /// </summary>
        [DataMember(Name="bidSize", EmitDefaultValue=false)]
        public double? BidSize { get; set; }

        /// <summary>
        /// Gets or Sets AskSize
        /// </summary>
        [DataMember(Name="askSize", EmitDefaultValue=false)]
        public double? AskSize { get; set; }

        /// <summary>
        /// Gets or Sets MessageBoardId
        /// </summary>
        [DataMember(Name="messageBoardId", EmitDefaultValue=false)]
        public string MessageBoardId { get; set; }

        /// <summary>
        /// Gets or Sets FullExchangeName
        /// </summary>
        [DataMember(Name="fullExchangeName", EmitDefaultValue=false)]
        public string FullExchangeName { get; set; }

        /// <summary>
        /// Gets or Sets LongName
        /// </summary>
        [DataMember(Name="longName", EmitDefaultValue=false)]
        public string LongName { get; set; }

        /// <summary>
        /// Gets or Sets FinancialCurrency
        /// </summary>
        [DataMember(Name="financialCurrency", EmitDefaultValue=false)]
        public string FinancialCurrency { get; set; }

        /// <summary>
        /// Gets or Sets AverageDailyVolume3Month
        /// </summary>
        [DataMember(Name="averageDailyVolume3Month", EmitDefaultValue=false)]
        public double? AverageDailyVolume3Month { get; set; }

        /// <summary>
        /// Gets or Sets AverageDailyVolume10Day
        /// </summary>
        [DataMember(Name="averageDailyVolume10Day", EmitDefaultValue=false)]
        public double? AverageDailyVolume10Day { get; set; }

        /// <summary>
        /// Gets or Sets FiftyTwoWeekLowChange
        /// </summary>
        [DataMember(Name="fiftyTwoWeekLowChange", EmitDefaultValue=false)]
        public double? FiftyTwoWeekLowChange { get; set; }

        /// <summary>
        /// Gets or Sets FiftyTwoWeekLowChangePercent
        /// </summary>
        [DataMember(Name="fiftyTwoWeekLowChangePercent", EmitDefaultValue=false)]
        public double? FiftyTwoWeekLowChangePercent { get; set; }

        /// <summary>
        /// Gets or Sets FiftyTwoWeekRange
        /// </summary>
        [DataMember(Name="fiftyTwoWeekRange", EmitDefaultValue=false)]
        public string FiftyTwoWeekRange { get; set; }

        /// <summary>
        /// Gets or Sets FiftyTwoWeekHighChange
        /// </summary>
        [DataMember(Name="fiftyTwoWeekHighChange", EmitDefaultValue=false)]
        public double? FiftyTwoWeekHighChange { get; set; }

        /// <summary>
        /// Gets or Sets FiftyTwoWeekHighChangePercent
        /// </summary>
        [DataMember(Name="fiftyTwoWeekHighChangePercent", EmitDefaultValue=false)]
        public double? FiftyTwoWeekHighChangePercent { get; set; }

        /// <summary>
        /// Gets or Sets FiftyTwoWeekLow
        /// </summary>
        [DataMember(Name="fiftyTwoWeekLow", EmitDefaultValue=false)]
        public double? FiftyTwoWeekLow { get; set; }

        /// <summary>
        /// Gets or Sets FiftyTwoWeekHigh
        /// </summary>
        [DataMember(Name="fiftyTwoWeekHigh", EmitDefaultValue=false)]
        public double? FiftyTwoWeekHigh { get; set; }

        /// <summary>
        /// Gets or Sets TrailingPE
        /// </summary>
        [DataMember(Name="trailingPE", EmitDefaultValue=false)]
        public double? TrailingPE { get; set; }

        /// <summary>
        /// Gets or Sets Market
        /// </summary>
        [DataMember(Name="market", EmitDefaultValue=false)]
        public string Market { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [DataMember(Name="shortName", EmitDefaultValue=false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Gets or Sets ForwardPE
        /// </summary>
        [DataMember(Name="forwardPE", EmitDefaultValue=false)]
        public double? ForwardPE { get; set; }

        /// <summary>
        /// Gets or Sets PriceToBook
        /// </summary>
        [DataMember(Name="priceToBook", EmitDefaultValue=false)]
        public double? PriceToBook { get; set; }

        /// <summary>
        /// Gets or Sets SourceInterval
        /// </summary>
        [DataMember(Name="sourceInterval", EmitDefaultValue=false)]
        public double? SourceInterval { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeTimezoneName
        /// </summary>
        [DataMember(Name="exchangeTimezoneName", EmitDefaultValue=false)]
        public string ExchangeTimezoneName { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeTimezoneShortName
        /// </summary>
        [DataMember(Name="exchangeTimezoneShortName", EmitDefaultValue=false)]
        public string ExchangeTimezoneShortName { get; set; }

        /// <summary>
        /// Gets or Sets GmtOffSetMilliseconds
        /// </summary>
        [DataMember(Name="gmtOffSetMilliseconds", EmitDefaultValue=false)]
        public long? GmtOffSetMilliseconds { get; set; }

        /// <summary>
        /// Gets or Sets EsgPopulated
        /// </summary>
        [DataMember(Name="esgPopulated", EmitDefaultValue=false)]
        public bool? EsgPopulated { get; set; }

        /// <summary>
        /// Gets or Sets Tradeable
        /// </summary>
        [DataMember(Name="tradeable", EmitDefaultValue=false)]
        public bool? Tradeable { get; set; }

        /// <summary>
        /// Gets or Sets Triggerable
        /// </summary>
        [DataMember(Name="triggerable", EmitDefaultValue=false)]
        public bool? Triggerable { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeDataDelayedBy
        /// </summary>
        [DataMember(Name="exchangeDataDelayedBy", EmitDefaultValue=false)]
        public long? ExchangeDataDelayedBy { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class YahooQuote {\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  QuoteType: ").Append(QuoteType).Append("\n");
            sb.Append("  QuoteSourceName: ").Append(QuoteSourceName).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  MarketState: ").Append(MarketState).Append("\n");
            sb.Append("  PriceHint: ").Append(PriceHint).Append("\n");
            sb.Append("  RegularMarketChangePercent: ").Append(RegularMarketChangePercent).Append("\n");
            sb.Append("  RegularMarketDayRange: ").Append(RegularMarketDayRange).Append("\n");
            sb.Append("  Bid: ").Append(Bid).Append("\n");
            sb.Append("  RegularMarketPreviousClose: ").Append(RegularMarketPreviousClose).Append("\n");
            sb.Append("  RegularMarketPrice: ").Append(RegularMarketPrice).Append("\n");
            sb.Append("  RegularMarketTime: ").Append(RegularMarketTime).Append("\n");
            sb.Append("  RegularMarketChange: ").Append(RegularMarketChange).Append("\n");
            sb.Append("  RegularMarketOpen: ").Append(RegularMarketOpen).Append("\n");
            sb.Append("  RegularMarketDayHigh: ").Append(RegularMarketDayHigh).Append("\n");
            sb.Append("  RegularMarketDayLow: ").Append(RegularMarketDayLow).Append("\n");
            sb.Append("  RegularMarketVolume: ").Append(RegularMarketVolume).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  EpsTrailingTwelveMonths: ").Append(EpsTrailingTwelveMonths).Append("\n");
            sb.Append("  EpsForward: ").Append(EpsForward).Append("\n");
            sb.Append("  SharesOutstanding: ").Append(SharesOutstanding).Append("\n");
            sb.Append("  BookValue: ").Append(BookValue).Append("\n");
            sb.Append("  FiftyDayAverage: ").Append(FiftyDayAverage).Append("\n");
            sb.Append("  FiftyDayAverageChange: ").Append(FiftyDayAverageChange).Append("\n");
            sb.Append("  FiftyDayAverageChangePercent: ").Append(FiftyDayAverageChangePercent).Append("\n");
            sb.Append("  TwoHundredDayAverage: ").Append(TwoHundredDayAverage).Append("\n");
            sb.Append("  TwoHundredDayAverageChange: ").Append(TwoHundredDayAverageChange).Append("\n");
            sb.Append("  TwoHundredDayAverageChangePercent: ").Append(TwoHundredDayAverageChangePercent).Append("\n");
            sb.Append("  MarketCap: ").Append(MarketCap).Append("\n");
            sb.Append("  Ask: ").Append(Ask).Append("\n");
            sb.Append("  BidSize: ").Append(BidSize).Append("\n");
            sb.Append("  AskSize: ").Append(AskSize).Append("\n");
            sb.Append("  MessageBoardId: ").Append(MessageBoardId).Append("\n");
            sb.Append("  FullExchangeName: ").Append(FullExchangeName).Append("\n");
            sb.Append("  LongName: ").Append(LongName).Append("\n");
            sb.Append("  FinancialCurrency: ").Append(FinancialCurrency).Append("\n");
            sb.Append("  AverageDailyVolume3Month: ").Append(AverageDailyVolume3Month).Append("\n");
            sb.Append("  AverageDailyVolume10Day: ").Append(AverageDailyVolume10Day).Append("\n");
            sb.Append("  FiftyTwoWeekLowChange: ").Append(FiftyTwoWeekLowChange).Append("\n");
            sb.Append("  FiftyTwoWeekLowChangePercent: ").Append(FiftyTwoWeekLowChangePercent).Append("\n");
            sb.Append("  FiftyTwoWeekRange: ").Append(FiftyTwoWeekRange).Append("\n");
            sb.Append("  FiftyTwoWeekHighChange: ").Append(FiftyTwoWeekHighChange).Append("\n");
            sb.Append("  FiftyTwoWeekHighChangePercent: ").Append(FiftyTwoWeekHighChangePercent).Append("\n");
            sb.Append("  FiftyTwoWeekLow: ").Append(FiftyTwoWeekLow).Append("\n");
            sb.Append("  FiftyTwoWeekHigh: ").Append(FiftyTwoWeekHigh).Append("\n");
            sb.Append("  TrailingPE: ").Append(TrailingPE).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  ForwardPE: ").Append(ForwardPE).Append("\n");
            sb.Append("  PriceToBook: ").Append(PriceToBook).Append("\n");
            sb.Append("  SourceInterval: ").Append(SourceInterval).Append("\n");
            sb.Append("  ExchangeTimezoneName: ").Append(ExchangeTimezoneName).Append("\n");
            sb.Append("  ExchangeTimezoneShortName: ").Append(ExchangeTimezoneShortName).Append("\n");
            sb.Append("  GmtOffSetMilliseconds: ").Append(GmtOffSetMilliseconds).Append("\n");
            sb.Append("  EsgPopulated: ").Append(EsgPopulated).Append("\n");
            sb.Append("  Tradeable: ").Append(Tradeable).Append("\n");
            sb.Append("  Triggerable: ").Append(Triggerable).Append("\n");
            sb.Append("  ExchangeDataDelayedBy: ").Append(ExchangeDataDelayedBy).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as YahooQuote);
        }

        /// <summary>
        /// Returns true if YahooQuote instances are equal
        /// </summary>
        /// <param name="input">Instance of YahooQuote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(YahooQuote input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.QuoteType == input.QuoteType ||
                    (this.QuoteType != null &&
                    this.QuoteType.Equals(input.QuoteType))
                ) && 
                (
                    this.QuoteSourceName == input.QuoteSourceName ||
                    (this.QuoteSourceName != null &&
                    this.QuoteSourceName.Equals(input.QuoteSourceName))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.MarketState == input.MarketState ||
                    (this.MarketState != null &&
                    this.MarketState.Equals(input.MarketState))
                ) && 
                (
                    this.PriceHint == input.PriceHint ||
                    (this.PriceHint != null &&
                    this.PriceHint.Equals(input.PriceHint))
                ) && 
                (
                    this.RegularMarketChangePercent == input.RegularMarketChangePercent ||
                    (this.RegularMarketChangePercent != null &&
                    this.RegularMarketChangePercent.Equals(input.RegularMarketChangePercent))
                ) && 
                (
                    this.RegularMarketDayRange == input.RegularMarketDayRange ||
                    (this.RegularMarketDayRange != null &&
                    this.RegularMarketDayRange.Equals(input.RegularMarketDayRange))
                ) && 
                (
                    this.Bid == input.Bid ||
                    (this.Bid != null &&
                    this.Bid.Equals(input.Bid))
                ) && 
                (
                    this.RegularMarketPreviousClose == input.RegularMarketPreviousClose ||
                    (this.RegularMarketPreviousClose != null &&
                    this.RegularMarketPreviousClose.Equals(input.RegularMarketPreviousClose))
                ) && 
                (
                    this.RegularMarketPrice == input.RegularMarketPrice ||
                    (this.RegularMarketPrice != null &&
                    this.RegularMarketPrice.Equals(input.RegularMarketPrice))
                ) && 
                (
                    this.RegularMarketTime == input.RegularMarketTime ||
                    (this.RegularMarketTime != null &&
                    this.RegularMarketTime.Equals(input.RegularMarketTime))
                ) && 
                (
                    this.RegularMarketChange == input.RegularMarketChange ||
                    (this.RegularMarketChange != null &&
                    this.RegularMarketChange.Equals(input.RegularMarketChange))
                ) && 
                (
                    this.RegularMarketOpen == input.RegularMarketOpen ||
                    (this.RegularMarketOpen != null &&
                    this.RegularMarketOpen.Equals(input.RegularMarketOpen))
                ) && 
                (
                    this.RegularMarketDayHigh == input.RegularMarketDayHigh ||
                    (this.RegularMarketDayHigh != null &&
                    this.RegularMarketDayHigh.Equals(input.RegularMarketDayHigh))
                ) && 
                (
                    this.RegularMarketDayLow == input.RegularMarketDayLow ||
                    (this.RegularMarketDayLow != null &&
                    this.RegularMarketDayLow.Equals(input.RegularMarketDayLow))
                ) && 
                (
                    this.RegularMarketVolume == input.RegularMarketVolume ||
                    (this.RegularMarketVolume != null &&
                    this.RegularMarketVolume.Equals(input.RegularMarketVolume))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.EpsTrailingTwelveMonths == input.EpsTrailingTwelveMonths ||
                    (this.EpsTrailingTwelveMonths != null &&
                    this.EpsTrailingTwelveMonths.Equals(input.EpsTrailingTwelveMonths))
                ) && 
                (
                    this.EpsForward == input.EpsForward ||
                    (this.EpsForward != null &&
                    this.EpsForward.Equals(input.EpsForward))
                ) && 
                (
                    this.SharesOutstanding == input.SharesOutstanding ||
                    (this.SharesOutstanding != null &&
                    this.SharesOutstanding.Equals(input.SharesOutstanding))
                ) && 
                (
                    this.BookValue == input.BookValue ||
                    (this.BookValue != null &&
                    this.BookValue.Equals(input.BookValue))
                ) && 
                (
                    this.FiftyDayAverage == input.FiftyDayAverage ||
                    (this.FiftyDayAverage != null &&
                    this.FiftyDayAverage.Equals(input.FiftyDayAverage))
                ) && 
                (
                    this.FiftyDayAverageChange == input.FiftyDayAverageChange ||
                    (this.FiftyDayAverageChange != null &&
                    this.FiftyDayAverageChange.Equals(input.FiftyDayAverageChange))
                ) && 
                (
                    this.FiftyDayAverageChangePercent == input.FiftyDayAverageChangePercent ||
                    (this.FiftyDayAverageChangePercent != null &&
                    this.FiftyDayAverageChangePercent.Equals(input.FiftyDayAverageChangePercent))
                ) && 
                (
                    this.TwoHundredDayAverage == input.TwoHundredDayAverage ||
                    (this.TwoHundredDayAverage != null &&
                    this.TwoHundredDayAverage.Equals(input.TwoHundredDayAverage))
                ) && 
                (
                    this.TwoHundredDayAverageChange == input.TwoHundredDayAverageChange ||
                    (this.TwoHundredDayAverageChange != null &&
                    this.TwoHundredDayAverageChange.Equals(input.TwoHundredDayAverageChange))
                ) && 
                (
                    this.TwoHundredDayAverageChangePercent == input.TwoHundredDayAverageChangePercent ||
                    (this.TwoHundredDayAverageChangePercent != null &&
                    this.TwoHundredDayAverageChangePercent.Equals(input.TwoHundredDayAverageChangePercent))
                ) && 
                (
                    this.MarketCap == input.MarketCap ||
                    (this.MarketCap != null &&
                    this.MarketCap.Equals(input.MarketCap))
                ) && 
                (
                    this.Ask == input.Ask ||
                    (this.Ask != null &&
                    this.Ask.Equals(input.Ask))
                ) && 
                (
                    this.BidSize == input.BidSize ||
                    (this.BidSize != null &&
                    this.BidSize.Equals(input.BidSize))
                ) && 
                (
                    this.AskSize == input.AskSize ||
                    (this.AskSize != null &&
                    this.AskSize.Equals(input.AskSize))
                ) && 
                (
                    this.MessageBoardId == input.MessageBoardId ||
                    (this.MessageBoardId != null &&
                    this.MessageBoardId.Equals(input.MessageBoardId))
                ) && 
                (
                    this.FullExchangeName == input.FullExchangeName ||
                    (this.FullExchangeName != null &&
                    this.FullExchangeName.Equals(input.FullExchangeName))
                ) && 
                (
                    this.LongName == input.LongName ||
                    (this.LongName != null &&
                    this.LongName.Equals(input.LongName))
                ) && 
                (
                    this.FinancialCurrency == input.FinancialCurrency ||
                    (this.FinancialCurrency != null &&
                    this.FinancialCurrency.Equals(input.FinancialCurrency))
                ) && 
                (
                    this.AverageDailyVolume3Month == input.AverageDailyVolume3Month ||
                    (this.AverageDailyVolume3Month != null &&
                    this.AverageDailyVolume3Month.Equals(input.AverageDailyVolume3Month))
                ) && 
                (
                    this.AverageDailyVolume10Day == input.AverageDailyVolume10Day ||
                    (this.AverageDailyVolume10Day != null &&
                    this.AverageDailyVolume10Day.Equals(input.AverageDailyVolume10Day))
                ) && 
                (
                    this.FiftyTwoWeekLowChange == input.FiftyTwoWeekLowChange ||
                    (this.FiftyTwoWeekLowChange != null &&
                    this.FiftyTwoWeekLowChange.Equals(input.FiftyTwoWeekLowChange))
                ) && 
                (
                    this.FiftyTwoWeekLowChangePercent == input.FiftyTwoWeekLowChangePercent ||
                    (this.FiftyTwoWeekLowChangePercent != null &&
                    this.FiftyTwoWeekLowChangePercent.Equals(input.FiftyTwoWeekLowChangePercent))
                ) && 
                (
                    this.FiftyTwoWeekRange == input.FiftyTwoWeekRange ||
                    (this.FiftyTwoWeekRange != null &&
                    this.FiftyTwoWeekRange.Equals(input.FiftyTwoWeekRange))
                ) && 
                (
                    this.FiftyTwoWeekHighChange == input.FiftyTwoWeekHighChange ||
                    (this.FiftyTwoWeekHighChange != null &&
                    this.FiftyTwoWeekHighChange.Equals(input.FiftyTwoWeekHighChange))
                ) && 
                (
                    this.FiftyTwoWeekHighChangePercent == input.FiftyTwoWeekHighChangePercent ||
                    (this.FiftyTwoWeekHighChangePercent != null &&
                    this.FiftyTwoWeekHighChangePercent.Equals(input.FiftyTwoWeekHighChangePercent))
                ) && 
                (
                    this.FiftyTwoWeekLow == input.FiftyTwoWeekLow ||
                    (this.FiftyTwoWeekLow != null &&
                    this.FiftyTwoWeekLow.Equals(input.FiftyTwoWeekLow))
                ) && 
                (
                    this.FiftyTwoWeekHigh == input.FiftyTwoWeekHigh ||
                    (this.FiftyTwoWeekHigh != null &&
                    this.FiftyTwoWeekHigh.Equals(input.FiftyTwoWeekHigh))
                ) && 
                (
                    this.TrailingPE == input.TrailingPE ||
                    (this.TrailingPE != null &&
                    this.TrailingPE.Equals(input.TrailingPE))
                ) && 
                (
                    this.Market == input.Market ||
                    (this.Market != null &&
                    this.Market.Equals(input.Market))
                ) && 
                (
                    this.ShortName == input.ShortName ||
                    (this.ShortName != null &&
                    this.ShortName.Equals(input.ShortName))
                ) && 
                (
                    this.ForwardPE == input.ForwardPE ||
                    (this.ForwardPE != null &&
                    this.ForwardPE.Equals(input.ForwardPE))
                ) && 
                (
                    this.PriceToBook == input.PriceToBook ||
                    (this.PriceToBook != null &&
                    this.PriceToBook.Equals(input.PriceToBook))
                ) && 
                (
                    this.SourceInterval == input.SourceInterval ||
                    (this.SourceInterval != null &&
                    this.SourceInterval.Equals(input.SourceInterval))
                ) && 
                (
                    this.ExchangeTimezoneName == input.ExchangeTimezoneName ||
                    (this.ExchangeTimezoneName != null &&
                    this.ExchangeTimezoneName.Equals(input.ExchangeTimezoneName))
                ) && 
                (
                    this.ExchangeTimezoneShortName == input.ExchangeTimezoneShortName ||
                    (this.ExchangeTimezoneShortName != null &&
                    this.ExchangeTimezoneShortName.Equals(input.ExchangeTimezoneShortName))
                ) && 
                (
                    this.GmtOffSetMilliseconds == input.GmtOffSetMilliseconds ||
                    (this.GmtOffSetMilliseconds != null &&
                    this.GmtOffSetMilliseconds.Equals(input.GmtOffSetMilliseconds))
                ) && 
                (
                    this.EsgPopulated == input.EsgPopulated ||
                    (this.EsgPopulated != null &&
                    this.EsgPopulated.Equals(input.EsgPopulated))
                ) && 
                (
                    this.Tradeable == input.Tradeable ||
                    (this.Tradeable != null &&
                    this.Tradeable.Equals(input.Tradeable))
                ) && 
                (
                    this.Triggerable == input.Triggerable ||
                    (this.Triggerable != null &&
                    this.Triggerable.Equals(input.Triggerable))
                ) && 
                (
                    this.ExchangeDataDelayedBy == input.ExchangeDataDelayedBy ||
                    (this.ExchangeDataDelayedBy != null &&
                    this.ExchangeDataDelayedBy.Equals(input.ExchangeDataDelayedBy))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Region != null)
                    hashCode = hashCode * 59 + this.Region.GetHashCode();
                if (this.QuoteType != null)
                    hashCode = hashCode * 59 + this.QuoteType.GetHashCode();
                if (this.QuoteSourceName != null)
                    hashCode = hashCode * 59 + this.QuoteSourceName.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.MarketState != null)
                    hashCode = hashCode * 59 + this.MarketState.GetHashCode();
                if (this.PriceHint != null)
                    hashCode = hashCode * 59 + this.PriceHint.GetHashCode();
                if (this.RegularMarketChangePercent != null)
                    hashCode = hashCode * 59 + this.RegularMarketChangePercent.GetHashCode();
                if (this.RegularMarketDayRange != null)
                    hashCode = hashCode * 59 + this.RegularMarketDayRange.GetHashCode();
                if (this.Bid != null)
                    hashCode = hashCode * 59 + this.Bid.GetHashCode();
                if (this.RegularMarketPreviousClose != null)
                    hashCode = hashCode * 59 + this.RegularMarketPreviousClose.GetHashCode();
                if (this.RegularMarketPrice != null)
                    hashCode = hashCode * 59 + this.RegularMarketPrice.GetHashCode();
                if (this.RegularMarketTime != null)
                    hashCode = hashCode * 59 + this.RegularMarketTime.GetHashCode();
                if (this.RegularMarketChange != null)
                    hashCode = hashCode * 59 + this.RegularMarketChange.GetHashCode();
                if (this.RegularMarketOpen != null)
                    hashCode = hashCode * 59 + this.RegularMarketOpen.GetHashCode();
                if (this.RegularMarketDayHigh != null)
                    hashCode = hashCode * 59 + this.RegularMarketDayHigh.GetHashCode();
                if (this.RegularMarketDayLow != null)
                    hashCode = hashCode * 59 + this.RegularMarketDayLow.GetHashCode();
                if (this.RegularMarketVolume != null)
                    hashCode = hashCode * 59 + this.RegularMarketVolume.GetHashCode();
                if (this.Exchange != null)
                    hashCode = hashCode * 59 + this.Exchange.GetHashCode();
                if (this.EpsTrailingTwelveMonths != null)
                    hashCode = hashCode * 59 + this.EpsTrailingTwelveMonths.GetHashCode();
                if (this.EpsForward != null)
                    hashCode = hashCode * 59 + this.EpsForward.GetHashCode();
                if (this.SharesOutstanding != null)
                    hashCode = hashCode * 59 + this.SharesOutstanding.GetHashCode();
                if (this.BookValue != null)
                    hashCode = hashCode * 59 + this.BookValue.GetHashCode();
                if (this.FiftyDayAverage != null)
                    hashCode = hashCode * 59 + this.FiftyDayAverage.GetHashCode();
                if (this.FiftyDayAverageChange != null)
                    hashCode = hashCode * 59 + this.FiftyDayAverageChange.GetHashCode();
                if (this.FiftyDayAverageChangePercent != null)
                    hashCode = hashCode * 59 + this.FiftyDayAverageChangePercent.GetHashCode();
                if (this.TwoHundredDayAverage != null)
                    hashCode = hashCode * 59 + this.TwoHundredDayAverage.GetHashCode();
                if (this.TwoHundredDayAverageChange != null)
                    hashCode = hashCode * 59 + this.TwoHundredDayAverageChange.GetHashCode();
                if (this.TwoHundredDayAverageChangePercent != null)
                    hashCode = hashCode * 59 + this.TwoHundredDayAverageChangePercent.GetHashCode();
                if (this.MarketCap != null)
                    hashCode = hashCode * 59 + this.MarketCap.GetHashCode();
                if (this.Ask != null)
                    hashCode = hashCode * 59 + this.Ask.GetHashCode();
                if (this.BidSize != null)
                    hashCode = hashCode * 59 + this.BidSize.GetHashCode();
                if (this.AskSize != null)
                    hashCode = hashCode * 59 + this.AskSize.GetHashCode();
                if (this.MessageBoardId != null)
                    hashCode = hashCode * 59 + this.MessageBoardId.GetHashCode();
                if (this.FullExchangeName != null)
                    hashCode = hashCode * 59 + this.FullExchangeName.GetHashCode();
                if (this.LongName != null)
                    hashCode = hashCode * 59 + this.LongName.GetHashCode();
                if (this.FinancialCurrency != null)
                    hashCode = hashCode * 59 + this.FinancialCurrency.GetHashCode();
                if (this.AverageDailyVolume3Month != null)
                    hashCode = hashCode * 59 + this.AverageDailyVolume3Month.GetHashCode();
                if (this.AverageDailyVolume10Day != null)
                    hashCode = hashCode * 59 + this.AverageDailyVolume10Day.GetHashCode();
                if (this.FiftyTwoWeekLowChange != null)
                    hashCode = hashCode * 59 + this.FiftyTwoWeekLowChange.GetHashCode();
                if (this.FiftyTwoWeekLowChangePercent != null)
                    hashCode = hashCode * 59 + this.FiftyTwoWeekLowChangePercent.GetHashCode();
                if (this.FiftyTwoWeekRange != null)
                    hashCode = hashCode * 59 + this.FiftyTwoWeekRange.GetHashCode();
                if (this.FiftyTwoWeekHighChange != null)
                    hashCode = hashCode * 59 + this.FiftyTwoWeekHighChange.GetHashCode();
                if (this.FiftyTwoWeekHighChangePercent != null)
                    hashCode = hashCode * 59 + this.FiftyTwoWeekHighChangePercent.GetHashCode();
                if (this.FiftyTwoWeekLow != null)
                    hashCode = hashCode * 59 + this.FiftyTwoWeekLow.GetHashCode();
                if (this.FiftyTwoWeekHigh != null)
                    hashCode = hashCode * 59 + this.FiftyTwoWeekHigh.GetHashCode();
                if (this.TrailingPE != null)
                    hashCode = hashCode * 59 + this.TrailingPE.GetHashCode();
                if (this.Market != null)
                    hashCode = hashCode * 59 + this.Market.GetHashCode();
                if (this.ShortName != null)
                    hashCode = hashCode * 59 + this.ShortName.GetHashCode();
                if (this.ForwardPE != null)
                    hashCode = hashCode * 59 + this.ForwardPE.GetHashCode();
                if (this.PriceToBook != null)
                    hashCode = hashCode * 59 + this.PriceToBook.GetHashCode();
                if (this.SourceInterval != null)
                    hashCode = hashCode * 59 + this.SourceInterval.GetHashCode();
                if (this.ExchangeTimezoneName != null)
                    hashCode = hashCode * 59 + this.ExchangeTimezoneName.GetHashCode();
                if (this.ExchangeTimezoneShortName != null)
                    hashCode = hashCode * 59 + this.ExchangeTimezoneShortName.GetHashCode();
                if (this.GmtOffSetMilliseconds != null)
                    hashCode = hashCode * 59 + this.GmtOffSetMilliseconds.GetHashCode();
                if (this.EsgPopulated != null)
                    hashCode = hashCode * 59 + this.EsgPopulated.GetHashCode();
                if (this.Tradeable != null)
                    hashCode = hashCode * 59 + this.Tradeable.GetHashCode();
                if (this.Triggerable != null)
                    hashCode = hashCode * 59 + this.Triggerable.GetHashCode();
                if (this.ExchangeDataDelayedBy != null)
                    hashCode = hashCode * 59 + this.ExchangeDataDelayedBy.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                return hashCode;
            }
        }
    }
}
